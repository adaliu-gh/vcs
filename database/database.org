#+TITLE:虚拟选课系统数据库设计
#+SETUPFILE:/home/ada/Documents/org-html-themes/setup/theme-bigblow.setup
* tables
** student
#+BEGIN_SRC sql
CREATE TABLE student(
id CHAR(11) NOT NULL,
name CHAR(10) NOT NULL,
pass CHAR(30) NOT NULL,
inschool TINYINT(1) NOT NULL,
gender TINYINT(1) NOT NULL,
major CHAR(20) NOT NULL,
department CHAR(10) NOT NULL,
grade TINYINT(1) NOT NULL,
PRIMARY KEY (id));
#+END_SRC
** instructor
#+BEGIN_SRC sql
CREATE TABLE instructor(
id CHAR(11) NOT NULL,
name CHAR(10) NOT NULL,
pass CHAR(30) NOT NULL,
gender TINYINT(1) NOT NULL,
PRIMARY KEY (id));
#+END_SRC
** course
#+BEGIN_SRC sql
CREATE TABLE course(
id CHAR(13) NOT NULL,
code CHAR(10) NOT NULL,
name CHAR(20) NOT NULL,
credits TINYINT(1) NOT NULL,
instructor_name CHAR(10) NOT NULL,
instructor_id CHAR(11) NOT NULL,
department_name CHAR(10) NOT NULL,
campus CHAR(20) DEFAULT 'hd',
start_week TINYINT(2) NOT NULL,
end_week TINYINT(2) NOT NULL,
weekday CHAR(3) NOT NULL,
start_time TINYINT(1) NOT NULL,
end_time TINYINT(1) NOT NULL,
restricted_major CHAR(10),
restricted_grade TINYINT(1),
restricted_gender TINYINT(1),
notes TEXT,
PRIMARY KEY (id));
#+END_SRC
*** INDEX
**** course inquiry
#+BEGIN_SRC sql
CREATE index course_inquiry ON course(id,code,name,instructor_name,
department_name,campus,weekday);
#+END_SRC
** number
#+BEGIN_SRC sql
CREATE table number(
id CHAR(13) NOT NULL,
maximum INT NOT NULL,
allowance INT NOT NULL,
PRIMARY KEY (id));
#+END_SRC
** register
#+BEGIN_SRC sql
CREATE TABLE register(
id BIGINT NOT NULL AUTO_INCREMENT,
course_id CHAR(13) NOT NULL,
course_name CHAR(20) NOT NULL,
student_id CHAR(11) NOT NULL,
student_name CHAR(10) NOT NULL,
instructor_name CHAR(10) NOT NULL,
instructor_id CHAR(11) NOT NULL,
score INT(3) UNSIGNED default NULL,
PRIMARY KEY (id));
#+END_SRC
*** INDEX
**** instructor
#+BEGIN_SRC sql
CREATE INDEX instructor ON register(instructor_id);
#+END_SRC
**** student
#+BEGIN_SRC sql
CREATE INDEX student ON register(student_id);
#+END_SRC
**** course
#+BEGIN_SRC sql
CREATE INDEX course ON register(course_id);
#+END_SRC
** major
#+BEGIN_SRC sql
CREATE TABLE major(
name CHAR(20) NOT NULL,
department CHAR(10) NOT NULL,
counselor CHAR(10) NOT NULL,
PRIMARY KEY (name));
#+END_SRC
** department
#+BEGIN_SRC sql
CREATE TABLE department(
name CHAR(10) NOT NULL,
PRIMARY KEY (name));
#+END_SRC
* relations
- student-major n-1
- student-register 1-n
- student-course m-n
- course-register 1-n
- instructor-course 1-n
- instructor-register 1-n
- major-department n-1
- instructor-department n-1
* services
** 视图
*** TODO instructor
**** TODO 得到教师的时间表，行标题为开始上课时间，列标题为星期几
#+BEGIN_SRC sql
CREATE VIEW instructor_timetable AS 
SELECT start_time AS time,
CONCAT(IF(weekday='Mon',name,NULL)) AS Mon,
CONCAT(IF(weekday='Tue',name,NULL)) AS Tue,
CONCAT(IF(weekday='Wed',name,NULL)) AS Wed,
CONCAT(IF(weekday='Thu',name,NULL)) AS Thu,
CONCAT(IF(weekday='Fri',name,NULL)) AS Fri,
CONCAT(IF(weekday='Sat',name,NULL)) AS Sat,
CONCAT(IF(weekday='Sun',name,NULL)) AS Sun
FROM (
SELECT
name,weekday,start_time
FROM course
WHERE id IN 
(SELECT course_id
FROM register
WHERE instructor_id=<instructor_id>) ) AS a
GROUP BY time
ORDER BY time asc;
#+END_SRC
*** TODO student
**** TODO 得到学生的时间表，行标题为开始上课时间，列标题为星期几
#+BEGIN_SRC sql
CREATE VIEW student_timetable AS 
SELECT start_time AS time,
CONCAT(IF(weekday='Mon',name,NULL)) AS Mon,
CONCAT(IF(weekday='Tue',name,NULL)) AS Tue,
CONCAT(IF(weekday='Wed',name,NULL)) AS Wed,
CONCAT(IF(weekday='Thu',name,NULL)) AS Thu,
CONCAT(IF(weekday='Fri',name,NULL)) AS Fri,
CONCAT(IF(weekday='Sat',name,NULL)) AS Sat,
CONCAT(IF(weekday='Sun',name,NULL)) AS Sun
FROM (
SELECT
name,weekday,start_time
FROM course
WHERE id IN 
(SELECT course_id
FROM register
WHERE student_id=<student_id>) ) as a
GROUP BY time
ORDER BY time asc;
#+END_SRC
** 触发器 / 事务
*** student
**** TODO 增加课程的各种限制（由java部分完成）
***** TODO 有余量
***** TODO maximum credits 32
***** TODO no major/grade/gender restriction
***** TODO no time clash
**** DONE 添加课程之后增加余量
CLOSED: [2016-09-09 五 13:59]
#+BEGIN_SRC sql
CREATE TRIGGER tri_after_add AFTER INSERT ON register FOR EACH ROW
        UPDATE number SET allowance=allowance-1 WHERE id=NEW.course_id;
#+END_SRC
**** DONE 退课后更改余量
CLOSED: [2016-09-09 五 14:04]
#+BEGIN_SRC sql
CREATE TRIGGER tri_after_drop AFTER DELETE ON register FOR EACH ROW
        UPDATE number SET allowance=allowance+1 WHERE id=OLD.course_id;
DELIMITER;
#+END_SRC
*** instructor
**** TODO 录入成绩-检查成绩是否在合法范围之内 (由java部分完成)
** 存储过程/函数
*** 辅助
**** DONE 获得余量
CLOSED: [2016-09-09 五 11:08]
#+BEGIN_SRC sql
DELIMITER //
CREATE function fun_get_allowance(
id CHAR(13))
RETURNS INT
BEGIN
    DECLARE allowance INT;
    SELECT allowance INTO @allowance
    FROM number
    WHERE id=id;
    RETURN(allowance);
END //
DELIMITER;
#+END_SRC
**** DONE 获得总额
CLOSED: [2016-09-09 五 11:08]
#+BEGIN_SRC sql
DELIMITER //
CREATE function fun_get_maxium(
id CHAR(13))
RETURNS INT
BEGIN
    DECLARE maxium INT;
    SELECT maxium INTO @maxium
    FROM number
    WHERE id=id;
    RETURN(maxium);
END //
DELIMITER;
#+END_SRC
*** student
**** DONE 退课
CLOSED: [2016-09-11 日 13:24]
#+BEGIN_SRC  sql
create procedure pro_stu_drop_course(
in course_id char(13),
in student_id char(11))
delete from register
where 
  course_id=course_id and student_id=student_id;
#+END_SRC
**** TODO 添加课程
#+BEGIN_SRC sql
create procedure pro_stu_add_course(
in course_id char(13),
in student_id char(11))
  insert into register(course_id,course_name,student_id,student_name,
    instructor_id,instructor_name)
  select c.id, c.name, s.id,s.name,c.instructor_name, c.instructor_id
  from course as c, student as s
  where c.id=course_id and s.id=student_id;
#+END_SRC
**** DONE 获得已添加课程的清单
CLOSED: [2016-09-09 五 11:09]
#+BEGIN_SRC sql
CREATE PROCEDURE pro_stu_added(
IN id CHAR(11))
  SELECT 
  c.id, c.code, c.name, c.instructor_name,c.credits,
  c.department_name,c.campus,c.start_week,c.end_week,
  c.weekday,c.start_time,c.end_time,c.restricted_major,
  c.restricted_grade,c.restricted_gender,c.notes,
  n.allowance,n.maximum 
  FROM course AS c
  INNER JOIN number AS n ON c.id=n.id
  WHERE c.id IN (SELECT course_id FROM register
      WHERE student_id=id);
#+END_SRC
**** DONE 查询课程
CLOSED: [2016-09-09 五 12:53]
#+BEGIN_SRC sql
CREATE PROCEDURE pro_stu_courses(
IN id CHAR(14),
IN code CHAR(11),
IN name CHAR(21),
IN instructor_name CHAR(11),
IN department_name CHAR(11),
IN campus CHAR(21),
IN weekday CHAR(4))
  SELECT 
  c.id, c.code, c.name, c.instructor_name,
  c.department_name,c.campus,c.start_week,c.end_week,
  c.weekday,c.start_time,c.end_time,c.restricted_major,
  c.restricted_grade,c.restricted_gender,c.notes,
  n.allowance,n.maximum
  FROM course AS c
  INNER JOIN number AS n ON c.id=n.id
  WHERE c.id LIKE IF("null",c.id,id) 
    AND c.code LIKE IF("null",c.code,code) 
    AND c.name LIKE IF("null",c.name,name)
    AND c.instructor_name LIKE IF("null",c.instructor_name,instructor_name)
    AND c.department_name LIKE IF("null",c.department_name,department_name) 
    AND c.campus LIKE IF("null",c.campus,campus) 
    AND c.weekday LIKE IF("null",c.weekday,weekday)
  ORDER BY c.id asc;
#+END_SRC
**** DONE 查询成绩
CLOSED: [2016-09-09 五 11:09]
#+BEGIN_SRC sql
CREATE PROCEDURE pro_stu_scores(
IN id CHAR(11))

  SELECT
  course_id, course_name,instructor_name,score
  FROM register 
  WHERE student_id=id AND score !=NULL; 

#+END_SRC
*** instructor
**** DONE 得到某个老师所教授课程清单
CLOSED: [2016-09-09 五 11:09]
#+BEGIN_SRC sql
CREATE PROCEDURE pro_ins_courses(
IN id CHAR(11))

  SELECT 
  id, code, name, instructor_name,
  department_name,campus,start_week,end_week,
  weekday,start_time,end_time,restricted_major,
  restricted_grade,restricted_gender,notes
  FROM course 
  WHERE instructor_id=id;
#+END_SRC
**** DONE 得到单个课程的花名册
CLOSED: [2016-09-09 五 11:09]
#+BEGIN_SRC sql
CREATE PROCEDURE pro_ins_register(
IN course_id CHAR(13))
  SELECT 
  s.id,s.name,s.major,s.grade,s.gender
  FROM student AS s
  LEFT JOIN register AS r ON r.student_id=s.id
  WHERE r.course_id=course_id
  ORDER BY s.id asc;
#+END_SRC
* 日志
** <2016-09-07 三> 
*** 表格完成
** <2016-09-08 四>
*** 将课程的总人数和余量单独换分出一个表格，因为要对余量进行频繁的更改
*** 新增各种索引
*** 将VARCHAR换成CHAR加快查询速度（但是会增大空间负担）
*** 视图大致完成
*** TODO 增加了老师和学生的课程表，仅按开始上课时间排序
*** 去掉专业和院系ID
** <2016-09-09 五> 
*** 将查询视图转换成存储过程，并增加获得余量/总额的函数
**** 存储过程有
***** 学生
****** 查询课程
****** 查询成绩
****** 获得已添加课程的清单
***** 老师
****** 得到单个课程的花名册
****** 得到某个老师所教授课程清单
*** 创建course的组合索引，以加快查询速度
*** TODO 忘了考虑一门课程可能分布在一个星期的不同天
*** TODO 课程表修改仍需修改
*** 增加选课退课后更改余量的触发器 
** <2016-09-10 六> 
*** 忘了记录了
*** 在研究java
** <2016-09-11 日> 
*** 
